<?xml version="1.0" encoding="UTF-8"?><sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" sv:name="tutorial-unsplash"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:page</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>b541cddd-b38d-4e27-a39b-028e40a621c4</sv:value></sv:property><sv:property sv:name="abstract" sv:type="String"><sv:value>Magnolia Light Development tutorial that walks through the steps in creating a simple page component.
Unsplash is a popular stock photo/image service powered by user contributed photos.
How to incorporate photos from UnSplash in Magnolia website pages is the topic of this lesson.
By following the tutorial, the learner creates a light module and configures the associated contentType, app and templates. 

In particular,   page template component for UnSplash photo is crafted  so that the component could be used effortlessly by content Authors.</sv:value></sv:property><sv:property sv:name="hideInNav" sv:type="Boolean"><sv:value>false</sv:value></sv:property><sv:property sv:name="mgnl:checksum" sv:type="String"><sv:value>23F6B1E6936076D161EC0A35AFED8FC7</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T19:38:52.472+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-04T16:28:17.006+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:pages/basic</sv:value></sv:property><sv:property sv:name="navigationTitle" sv:type="String"><sv:value>LightDev Unsplash Image Component</sv:value></sv:property><sv:property sv:name="noCache" sv:type="Boolean"><sv:value>false</sv:value></sv:property><sv:property sv:name="title" sv:type="String"><sv:value>Magnolia Light Development: A Simple Page Component Step by Step</sv:value></sv:property><sv:node sv:name="main"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:area</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>354ff4d9-1d96-4ef6-8091-d7d0012cf0b2</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T19:39:17.285+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-04T16:28:17.006+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:node sv:name="0"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>803b196f-4774-4766-82df-b82b3c5b43e7</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Light Development</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T20:39:05.009+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-03T14:37:05.570+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;Presentation is an important functionality of Content Management Systems. While all the CMS heavy lifting is done in Java, doing presentation logic in heavy duty Java is simply not sustainable.&lt;/p&gt;

&lt;p&gt;Magnolia light development is configuration driven presentation approach. A bunch of YAML files, template scripts and style sheets acts as the &amp;#39;last mile&amp;#39; of the content experience delivery pipeline. Making the lastmile Expressive, Effective, and Effortless is the intent of Magnolia Light Development: Instead of Java code, simply configure YAML files to acheive presentation awesomeness.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="00"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>8b3f223d-f111-488e-bb09-d7ba6e54c762</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Integrating the UnSplash Dataset: Choosing UnSplash photos made easier</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T20:53:23.081+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-03T16:53:32.300+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;UnNsplash makes a huge variety of interesting photos/images available for anyone to use. The UnSplash team strives to reduce&amp;nbsp; friction in using the photo images.&lt;/p&gt;

&lt;p&gt;The UnSplash API is one convenient way of incorporating UnSplash images in any content.&lt;/p&gt;

&lt;p&gt;The full photo collection is also available as a dataset, opening the possiblity of natively integrating the UnSplash dataset on to any CMS. Using the UnSplash dataset within Magnolia is simple with light development. Once the dataset is imported, making the photos as page component makes it very convenient for the Authors and Editors to use the UnSplash photos.&lt;/p&gt;

&lt;p&gt;Without further ado, lets learn in detail, the steps involved in incorporating this content dataset. And exposing the UnSplsdh content as configurable page template component.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="01"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>383115c9-3294-42c7-a28a-1d37b0d406c7</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step1: Create UnSplash Light Module</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T20:57:18.646+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-03T14:44:22.057+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;From your lightmodules folder execute the command:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mgnl create-light-module unsplash-dam-magnolia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will create a light module under the unsplash-dam-magnolia folder.&lt;/p&gt;

&lt;p&gt;Change directory to that folder.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="02"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>7178a3b0-6f1b-433d-8a81-3044217f16d6</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step2 - Create unsplash Content Type</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T21:00:11.506+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-04T12:37:40.960+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;In this step we create contentType to reflect the &lt;a href="https://github.com/unsplash/datasets/blob/master/DOCS.md"&gt;field names and data type of the UnSplash dataset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mgnl create-content-type --app unsplash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also create a content App to manage the content. The --app option above effect the app creation.&lt;/p&gt;

&lt;p&gt;This will also initialize a workspace called unsplash. There will be a notification to that effect in the Author instance.&lt;/p&gt;

&lt;p&gt;In the contentTypes folder, find the unsplash.yaml. Edit it such that the data types reflect the &lt;a href="https://github.com/unsplash/datasets/blob/master/DOCS.md"&gt;field names in the UnSplash dataset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open the Unsplash App in the Author instance and verify that the fields are indeed reflecting the fields in the UnSplash dataset. For now, to keep it simple, we make all the fields as type: String.&lt;/p&gt;

&lt;p&gt;The edited file look likes:&lt;/p&gt;

&lt;p&gt;&lt;a href="${link:{uuid:{cb24c910-86b6-4587-8c3f-cd2dcdae203d},repository:{dam},path:{/tutorial/unsplash.yaml}}}"&gt;magnoliaAuthor/.magnolia/admincentral#app:resources:view;/magnolia-dam-unsplash/contentTypes/unsplash.yaml:edit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="03"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>f674fd84-f0fe-4c8f-9223-2d1ea16b1cdf</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step3: Import Content Using Groovy Script</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T22:25:37.693+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-04T12:38:41.824+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;For learning purpose, a tiny subset of the dataset is provided so that we focus on learning light development rather than tackling data quality nititygrities.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;For content that is exported via Magnolia, it is in xml or yaml format. It is easy to import the content in the UI Action Bar.&lt;/p&gt;

&lt;p&gt;The UnSplash dataset is in Tab Seperated Value(tsv) format. A simple groovy script is handy for the import.&lt;/p&gt;

&lt;p&gt;Please see unsplash-schema,tsv and unsplash-tiny-subset-photos.tsv for the content source we are going to use in this module.&lt;/p&gt;

&lt;p&gt;For crafting and testing the import script, we use the Groovy App.&lt;/p&gt;

&lt;p&gt;In the Author instance open the Groovy App under Dev.&lt;/p&gt;

&lt;p&gt;Create a folder and name it unsplash.&lt;/p&gt;

&lt;p&gt;And create a script and rename it as unsplashImportWithThumb.groovy&amp;nbsp;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href="${link:{uuid:{faa443df-a023-4ae4-b59b-61562409eafc},repository:{dam},path:{/tutorial/unsplashImportWithThumb.groovy}}}"&gt;&amp;nbsp;Link to file.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the script first we are parsing the schema.&lt;/p&gt;

&lt;p&gt;Then we process the content one line at a time. As part of the processing, we create a JCR node of type mgnl:unsplash ( The content type we created in the step above).And fill up the properties of the node with values from the tsv data file.&lt;/p&gt;

&lt;p&gt;For preview, a thumbnail image is downloaded and stored in the JCR as binary data child node. Using&amp;nbsp; &amp;nbsp;The Groovy&amp;#39;s URL .openStream() method does the thumbnail download.&lt;/p&gt;

&lt;p&gt;Then we export the unsplash workspace as xml. And save that file in the bootstrap folder of the light module.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="04"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>5dd3b091-2c3e-4faf-860f-3806c6ca07f0</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step 4: Create Component</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T22:31:46.027+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-04T16:28:17.006+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;&lt;em&gt;&lt;strong&gt;mgnl create-component -a unsplash-photo&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will create a prototype based component definition file in yaml format,&amp;nbsp; a component template script in freemarker templating langauge(ftl) format, and a dialog definition file in yaml format:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;templates/components/unsplash-photo.yaml&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;templates/components/unsplash-photo.ftl&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;dialog/components/unsplash-photo.yaml&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We edit these files to suit our purpose.&lt;/p&gt;

&lt;p&gt;First we edit the dialog definition.&lt;/p&gt;

&lt;p&gt;We create a LinkField to reference the content in the unsplash workspace.&lt;/p&gt;

&lt;p&gt;The component definition could be left as is. It just references the component template and the dialog.&lt;/p&gt;

&lt;p&gt;The component template is to be modified appropriaately to display the image from the &amp;#39;photo_image_url&amp;#39; property of the photo content.&lt;/p&gt;

&lt;p&gt;See Step 6 below for implementation hints on populating the template.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="05"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>1fb5ac58-f633-46c6-a46c-358090e6a841</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step 5: Configure Chooser to display Image Preview</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T22:39:06.854+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-03T21:22:45.650+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;The component&amp;#39;s dialog definition is altered to include a reference LinkField of the &amp;#39;unsplash&amp;#39; content type.&lt;/p&gt;

&lt;p&gt;Simply specify the datasource of the linkfield as of $type: jcrDatasource and workspace : unsplash&lt;/p&gt;

&lt;p&gt;The LinkField Chooser property is updated with a custom workbench to display the preview images.&lt;/p&gt;
</sv:value></sv:property></sv:node><sv:node sv:name="06"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:component</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>a321ba7b-e5ed-43b3-bd4f-8eab8b72a094</sv:value></sv:property><sv:property sv:name="headline" sv:type="String"><sv:value>Step 6: Component Template Script</sv:value></sv:property><sv:property sv:name="headlineLevel" sv:type="String"><sv:value>small</sv:value></sv:property><sv:property sv:name="imagePosition" sv:type="String"><sv:value>below</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T22:42:06.759+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-03-03T21:28:00.721+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:template" sv:type="String"><sv:value>mtk2:components/textImage</sv:value></sv:property><sv:property sv:name="text" sv:type="String"><sv:value>&lt;p&gt;We craft the template script to render the photo_image_url property in the UnSplash content node corresponding to the choosen photo.&lt;/p&gt;

&lt;p&gt;We give Attribution credits to the Photographer using the photographer_first_name, photographer_last_name photographer_username property in the node.&lt;/p&gt;

&lt;p&gt;We use the cmsfn Freemarker premitive to plug in the content properties into to the HTML &amp;lt;IMG&amp;gt; tag and &amp;lt;href&amp;gt; tag.&lt;/p&gt;
</sv:value></sv:property></sv:node></sv:node><sv:node sv:name="footer"><sv:property sv:name="jcr:primaryType" sv:type="Name"><sv:value>mgnl:area</sv:value></sv:property><sv:property sv:name="jcr:uuid" sv:type="String"><sv:value>c8ad2bd1-a589-4363-b771-494a1e033d77</sv:value></sv:property><sv:property sv:name="mgnl:created" sv:type="Date"><sv:value>2023-02-09T19:39:17.341+05:30</sv:value></sv:property><sv:property sv:name="mgnl:createdBy" sv:type="String"><sv:value>superuser</sv:value></sv:property><sv:property sv:name="mgnl:lastModified" sv:type="Date"><sv:value>2023-02-09T19:39:17.341+05:30</sv:value></sv:property><sv:property sv:name="mgnl:lastModifiedBy" sv:type="String"><sv:value>superuser</sv:value></sv:property></sv:node></sv:node>